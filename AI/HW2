{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNvFTrRo+BbXartPd9myAfK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Rtniewi/kcwiertniewicz-IDS/blob/main/AI/HW2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "You have two jugs of water, a five litre jug and a three litre jug. You can fill and empty the jugs as much as you want. How can you get exaclty four litres into the five litre jug?\n",
        "\n",
        "      R1     R3      R1      R3     R2       R3\n",
        "(5,3) - (5,0) - (2,3) - (2,0) - (0,2) - (5,2) - (4,3)\n",
        "\n",
        "Start State: (5,0)\n",
        "Goal State: (4,3)"
      ],
      "metadata": {
        "id": "gxkbb5Q_tH9z"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cJDXEE-mOh3K"
      },
      "outputs": [],
      "source": [
        "\n",
        "class WaterJugPuzzle():\n",
        "\n",
        "    #Model the state using two sets of strings: 5 litre jug and 3 litre jug\n",
        "    def __init__(self):\n",
        "      self.five = set(['one', 'two', 'three', 'four', 'five'])\n",
        "      self.three = set(['six', 'seven', 'eight'])\n",
        "\n",
        "    def five_jug_empty(self):\n",
        "      if self.five == set([]):\n",
        "        return True\n",
        "\n",
        "    def three_jug_empty(self):\n",
        "      if self.three == set([]):\n",
        "        return True\n",
        "\n",
        "    def save_state(self):\n",
        "      self._five  = set(list(self.five))\n",
        "      self._three = set(list(self.three))\n",
        "\n",
        "    def undo_state(self):\n",
        "      self.five  = set(list(self._five))\n",
        "      self.three = set(list(self._three))\n",
        "\n",
        "\n",
        "###############################################################################\n",
        "# Rule 1: Empty 3 litre jug\n",
        "###############################################################################\n",
        "def R1_empty_three_jug(self):\n",
        "\n",
        "  self.save_state()\n",
        "\n",
        "#STEP 3\n",
        "  if 'two' in self.five and 'eight' in self.three:\n",
        "\n",
        "    self.three.remove('six')\n",
        "    self.three.remove('seven')\n",
        "    self.three.remove('eight')\n",
        "\n",
        "#STEP 1\n",
        "  elif 'three' in self.three:\n",
        "\n",
        "    self.three.remove('six')\n",
        "    self.three.remove('seven')\n",
        "    self.three.remove('eight')\n",
        "\n",
        "\n",
        "  else:\n",
        "    raise ValueError('Error in process')\n",
        "\n",
        "###############################################################################\n",
        "# Rule 2: Fill 5 litre jug\n",
        "###############################################################################\n",
        "def R2_fill_five_jug(self):\n",
        "\n",
        "  self.save_state()\n",
        "\n",
        "  if self.five_jug.empty(self):\n",
        "\n",
        "#STEP 5\n",
        "    self.five.add('one')\n",
        "    self.five.add('two')\n",
        "    self.five.add('three')\n",
        "    self.five.add('four')\n",
        "    self.five.add('five')\n",
        "\n",
        "\n",
        "###############################################################################\n",
        "# Rule 3: Empty 5 litre jug into 3 litre jug\n",
        "###############################################################################\n",
        "def R3_five_jug_to_three_jug(self):\n",
        "\n",
        "  self.save_state()\n",
        "\n",
        "#STEP 2\n",
        "  if 'five' in self.five and self.three_jug_empty(self):\n",
        "\n",
        "    self.five.remove('three')\n",
        "    self.five.remove('four')\n",
        "    self.five.remove('five')\n",
        "\n",
        "    self.three.add('six')\n",
        "    self.three.add('seven')\n",
        "    self.three.add('eight')\n",
        "\n",
        "\n",
        "#STEP 4\n",
        "  elif self.three_jug_empty(self):\n",
        "\n",
        "    self.five.remove('one')\n",
        "    self.five.remove('two')\n",
        "\n",
        "    self.three.add('six')\n",
        "    self.three.add('seven')\n",
        "\n",
        "#STEP 6\n",
        "  elif 'five' in self.five and 'two' in self.three:\n",
        "\n",
        "    self.five.remove('five')\n",
        "\n",
        "    self.three.add('three')\n",
        "\n",
        "\n",
        "###############################################################################\n",
        "#Display water jug amounts\n",
        "###############################################################################\n",
        "def print_state(self):\n",
        "    print(\"===> five: {s}, three: {h}\".format(s = self.five, h = self.three))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Forming the Solution\n",
        "\n",
        "mcf = WaterJugPuzzle()\n",
        "\n",
        "#print the initial state (start state)\n",
        "mcf.print_state()\n",
        "\n",
        "print(\"-----------------\")\n",
        "# Apply Rule 1 (STEP 1) and print resulting state\n",
        "mcf.R1_empty_three_jug()\n",
        "mcf.print_state()\n",
        "\n",
        "print(\"-----------------\")\n",
        "#Apply Rule 3 (STEP 2) and print the resulting state\n",
        "mcf.R3_five_jug_to_three_jug\n",
        "mcf.print_state()\n",
        "\n",
        "print('-----------------')\n",
        "#Apply Rule 1 (STEP 3) and print the resulting state\n",
        "mcf.R1_empty_three_jug\n",
        "mcf.print_state\n",
        "\n",
        "print('-----------------')\n",
        "#Apply Rule 3 (STEP 4) and print the resulting state\n",
        "mcf.R3_five_jug_to_three_jug\n",
        "mcf.print_state\n",
        "\n",
        "print('-----------------')\n",
        "#Apply Rule 2 (STEP 5) and print the resulting state\n",
        "mcf.R2_fill_five_jug\n",
        "mcf.print_state\n",
        "\n",
        "print('-----------------')\n",
        "#Apply Rule 3 (STEP 6) and print the resulting state (goal state)\n",
        "mcf.R3_five_jug_to_three_jug\n",
        "mcf.print_state\n",
        "\n"
      ],
      "metadata": {
        "id": "JJbAl2-cDSOd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 246
        },
        "outputId": "debcc685-2c9c-469c-a177-c0503b5e5fa7"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'WaterJugPuzzle' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-b974ff7a0983>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#@title Forming the Solution\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmcf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mWaterJugPuzzle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#print the initial state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'WaterJugPuzzle' is not defined"
          ]
        }
      ]
    }
  ]
}